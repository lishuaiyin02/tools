{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _jpegJs = _interopRequireDefault(require(\"jpeg-js\"));\nvar _utils = require(\"@jimp/utils\");\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nconst MIME_TYPE = \"image/jpeg\";\nvar _default = () => ({\n  mime: {\n    [MIME_TYPE]: [\"jpeg\", \"jpg\", \"jpe\"]\n  },\n  constants: {\n    MIME_JPEG: MIME_TYPE\n  },\n  decoders: {\n    [MIME_TYPE]: _jpegJs.default.decode\n  },\n  encoders: {\n    [MIME_TYPE]: image => _jpegJs.default.encode(image.bitmap, image._quality).data\n  },\n  class: {\n    // The quality to be used when saving JPEG images\n    _quality: 100,\n    /**\n     * Sets the quality of the image when saving as JPEG format (default is 100)\n     * @param {number} n The quality to use 0-100\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    quality(n, cb) {\n      if (typeof n !== \"number\") {\n        return _utils.throwError.call(this, \"n must be a number\", cb);\n      }\n      if (n < 0 || n > 100) {\n        return _utils.throwError.call(this, \"n must be a number 0 - 100\", cb);\n      }\n      this._quality = Math.round(n);\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n      return this;\n    }\n  }\n});\nexports.default = _default;\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;\n//# sourceMappingURL=index.js.map"]}