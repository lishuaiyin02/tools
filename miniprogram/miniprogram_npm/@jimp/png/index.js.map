{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _pngjs = require(\"pngjs\");\nvar _utils = require(\"@jimp/utils\");\nconst MIME_TYPE = \"image/png\";\n\n// PNG filter types\nconst PNG_FILTER_AUTO = -1;\nconst PNG_FILTER_NONE = 0;\nconst PNG_FILTER_SUB = 1;\nconst PNG_FILTER_UP = 2;\nconst PNG_FILTER_AVERAGE = 3;\nconst PNG_FILTER_PATH = 4;\nvar _default = () => ({\n  mime: {\n    [MIME_TYPE]: [\"png\"]\n  },\n  constants: {\n    MIME_PNG: MIME_TYPE,\n    PNG_FILTER_AUTO,\n    PNG_FILTER_NONE,\n    PNG_FILTER_SUB,\n    PNG_FILTER_UP,\n    PNG_FILTER_AVERAGE,\n    PNG_FILTER_PATH\n  },\n  hasAlpha: {\n    [MIME_TYPE]: true\n  },\n  decoders: {\n    [MIME_TYPE]: _pngjs.PNG.sync.read\n  },\n  encoders: {\n    [MIME_TYPE](data) {\n      const png = new _pngjs.PNG({\n        width: data.bitmap.width,\n        height: data.bitmap.height\n      });\n      png.data = data.bitmap.data;\n      return _pngjs.PNG.sync.write(png, {\n        deflateLevel: data._deflateLevel,\n        deflateStrategy: data._deflateStrategy,\n        filterType: data._filterType,\n        colorType: typeof data._colorType === \"number\" ? data._colorType : data._rgba ? 6 : 2,\n        inputHasAlpha: data._rgba\n      });\n    }\n  },\n  class: {\n    _deflateLevel: 9,\n    _deflateStrategy: 3,\n    _filterType: PNG_FILTER_AUTO,\n    _colorType: null,\n    /**\n     * Sets the deflate level used when saving as PNG format (default is 9)\n     * @param {number} l Deflate level to use 0-9. 0 is no compression. 9 (default) is maximum compression.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    deflateLevel(l, cb) {\n      if (typeof l !== \"number\") {\n        return _utils.throwError.call(this, \"l must be a number\", cb);\n      }\n      if (l < 0 || l > 9) {\n        return _utils.throwError.call(this, \"l must be a number 0 - 9\", cb);\n      }\n      this._deflateLevel = Math.round(l);\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n      return this;\n    },\n    /**\n     * Sets the deflate strategy used when saving as PNG format (default is 3)\n     * @param {number} s Deflate strategy to use 0-3.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    deflateStrategy(s, cb) {\n      if (typeof s !== \"number\") {\n        return _utils.throwError.call(this, \"s must be a number\", cb);\n      }\n      if (s < 0 || s > 3) {\n        return _utils.throwError.call(this, \"s must be a number 0 - 3\", cb);\n      }\n      this._deflateStrategy = Math.round(s);\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n      return this;\n    },\n    /**\n     * Sets the filter type used when saving as PNG format (default is automatic filters)\n     * @param {number} f The quality to use -1-4.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    filterType(f, cb) {\n      if (typeof f !== \"number\") {\n        return _utils.throwError.call(this, \"n must be a number\", cb);\n      }\n      if (f < -1 || f > 4) {\n        return _utils.throwError.call(this, \"n must be -1 (auto) or a number 0 - 4\", cb);\n      }\n      this._filterType = Math.round(f);\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n      return this;\n    },\n    /**\n     * Sets the color type used when saving as PNG format\n     * @param {number} s color type to use 0, 2, 4, 6.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    colorType(s, cb) {\n      if (typeof s !== \"number\") {\n        return _utils.throwError.call(this, \"s must be a number\", cb);\n      }\n      if (s !== 0 && s !== 2 && s !== 4 && s !== 6) {\n        return _utils.throwError.call(this, \"s must be a number 0, 2, 4, 6.\", cb);\n      }\n      this._colorType = Math.round(s);\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n      return this;\n    }\n  }\n});\nexports.default = _default;\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;\n//# sourceMappingURL=index.js.map"]}