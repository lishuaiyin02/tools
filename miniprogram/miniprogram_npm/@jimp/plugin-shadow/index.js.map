{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _utils = require(\"@jimp/utils\");\n/**\n * Creates a circle out of an image.\n * @param {function(Error, Jimp)} options (optional)\n * opacity - opacity of the shadow between 0 and 1\n * size,- of the shadow\n * blur - how blurry the shadow is\n * x- x position of shadow\n * y - y position of shadow\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nvar _default = () => ({\n  shadow() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let cb = arguments.length > 1 ? arguments[1] : undefined;\n    if (typeof options === \"function\") {\n      cb = options;\n      options = {};\n    }\n    const {\n      opacity = 0.7,\n      size = 1.1,\n      x = -25,\n      y = 25,\n      blur = 5\n    } = options;\n\n    // clone the image\n    const orig = this.clone();\n    const shadow = this.clone();\n\n    // turn all it's pixels black\n    shadow.scan(0, 0, shadow.bitmap.width, shadow.bitmap.height, (x, y, idx) => {\n      shadow.bitmap.data[idx] = 0x00;\n      shadow.bitmap.data[idx + 1] = 0x00;\n      shadow.bitmap.data[idx + 2] = 0x00;\n      // up the opacity a little,\n      shadow.bitmap.data[idx + 3] = shadow.constructor.limit255(shadow.bitmap.data[idx + 3] * opacity);\n      this.bitmap.data[idx] = 0x00;\n      this.bitmap.data[idx + 1] = 0x00;\n      this.bitmap.data[idx + 2] = 0x00;\n      this.bitmap.data[idx + 3] = 0x00;\n    });\n\n    // enlarge it. This creates a \"shadow\".\n    shadow.resize(shadow.bitmap.width * size, shadow.bitmap.height * size).blur(blur);\n\n    // Then blit the \"shadow\" onto the background and the image on top of that.\n    this.composite(shadow, x, y);\n    this.composite(orig, 0, 0);\n    if ((0, _utils.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n    return this;\n  }\n});\nexports.default = _default;\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;\n//# sourceMappingURL=index.js.map"]}